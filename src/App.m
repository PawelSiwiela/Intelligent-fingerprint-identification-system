function App()
% APP Prosta aplikacja konsolowa do rozpoznawania odcisk√≥w palc√≥w
%
% Aplikacja umo≈ºliwiajƒÖca wyb√≥r r√≥≈ºnych scenariuszy rozpoznawania odcisk√≥w palc√≥w
% oraz obserwowanie wynik√≥w dzia≈Çania systemu przez interfejs konsolowy.

% Czyszczenie konsoli
clc;

% Tytu≈Ç aplikacji
printHeader('SYSTEM ROZPOZNAWANIA ODCISK√ìW PALC√ìW');

% Inicjalizacja konfiguracji
config = struct();

% ===== WYB√ìR METODY PREPROCESSING =====
fprintf('KROK 1: Wyb√≥r metody preprocessing\n');
fprintf('1 - Basic (szybka, podstawowa)\n');
fprintf('2 - Hybrid (basic + gabor)\n');
fprintf('3 - Advanced (zaawansowana, wolna)\n');
fprintf('4 - Por√≥wnanie wszystkich metod\n');
fprintf('Wybierz opcjƒô [1-4]: ');
preprocessChoice = input('');

switch preprocessChoice
    case 1
        config.preprocessing_method = 'basic';
        fprintf('‚úì Wybrano: Basic preprocessing\n');
    case 2
        config.preprocessing_method = 'hybrid';
        fprintf('‚úì Wybrano: Hybrid preprocessing\n');
    case 3
        config.preprocessing_method = 'advanced';
        fprintf('‚úì Wybrano: Advanced preprocessing\n');
    case 4
        config.preprocessing_method = 'all';
        fprintf('‚úì Wybrano: Por√≥wnanie wszystkich metod\n');
    otherwise
        config.preprocessing_method = 'basic';
        fprintf('‚ö† Nieprawid≈Çowy wyb√≥r. Ustawiam domy≈õlnie: Basic preprocessing\n');
end

fprintf('\n');

% ===== METODA EKSTRAKTOWANIA CECH =====
fprintf('KROK 2: Metoda ekstraktowania cech\n');
fprintf('1 - Simple (9 cech - szybka)\n');
fprintf('2 - Normalized (17 cech - zalecana)\n');
fprintf('3 - Statistical (25+ cech - dok≈Çadna)\n');
fprintf('Wybierz metodƒô [1-3]: ');
featureChoice = input('');

switch featureChoice
    case 1
        config.feature_method = 'simple';
        fprintf('‚úì Wybrano: Simple features (9 cech)\n');
    case 2
        config.feature_method = 'normalized';
        fprintf('‚úì Wybrano: Normalized features (17 cech)\n');
    case 3
        config.feature_method = 'statistical';
        fprintf('‚úì Wybrano: Statistical features (25+ cech)\n');
    otherwise
        config.feature_method = 'normalized';
        fprintf('‚ö† Nieprawid≈Çowy wyb√≥r. Ustawiam domy≈õlnie: Normalized features\n');
end

fprintf('\n');

% ===== TRYB DZIA≈ÅANIA =====
fprintf('KROK 3: Tryb dzia≈Çania\n');
fprintf('1 - Test szybki (syntetyczne dane)\n');
fprintf('2 - Test na pojedynczym obrazie\n');
fprintf('3 - Test na ma≈Çym dataset (10 obraz√≥w)\n');
fprintf('4 - Pe≈Çny dataset\n');
fprintf('Wybierz tryb [1-4]: ');
modeChoice = input('');

switch modeChoice
    case 1
        config.mode = 'quick';
        fprintf('‚úì Wybrano: Test szybki\n');
    case 2
        config.mode = 'single';
        fprintf('‚úì Wybrano: Test pojedynczego obrazu\n');
    case 3
        config.mode = 'small';
        fprintf('‚úì Wybrano: Ma≈Çy dataset\n');
    case 4
        config.mode = 'full';
        fprintf('‚úì Wybrano: Pe≈Çny dataset\n');
    otherwise
        config.mode = 'quick';
        fprintf('‚ö† Nieprawid≈Çowy wyb√≥r. Ustawiam domy≈õlnie: Test szybki\n');
end

fprintf('\n');

% ===== WIZUALIZACJE =====
fprintf('KROK 4: Wizualizacje\n');
fprintf('1 - Tak (poka≈º wyniki)\n');
fprintf('2 - Nie (tylko konsola)\n');
fprintf('Czy generowaƒá wizualizacje? [1-2]: ');
vizChoice = input('');

switch vizChoice
    case 1
        config.show_visualizations = true;
        fprintf('‚úì Wybrano: Wizualizacje w≈ÇƒÖczone\n');
    case 2
        config.show_visualizations = false;
        fprintf('‚úì Wybrano: Tylko wyniki w konsoli\n');
    otherwise
        config.show_visualizations = false;
        fprintf('‚ö† Nieprawid≈Çowy wyb√≥r. Ustawiam domy≈õlnie: Bez wizualizacji\n');
end

fprintf('\n');

% ===== ZAPIS WYNIK√ìW =====
fprintf('KROK 5: Zapis wynik√≥w\n');
fprintf('1 - Tak (zapisz do plik√≥w)\n');
fprintf('2 - Nie\n');
fprintf('Czy zapisaƒá wyniki? [1-2]: ');
saveChoice = input('');

switch saveChoice
    case 1
        config.save_results = true;
        fprintf('‚úì Wybrano: Zapis wynik√≥w w≈ÇƒÖczony\n');
    case 2
        config.save_results = false;
        fprintf('‚úì Wybrano: Bez zapisu wynik√≥w\n');
    otherwise
        config.save_results = false;
        fprintf('‚ö† Nieprawid≈Çowy wyb√≥r. Ustawiam domy≈õlnie: Bez zapisu\n');
end

fprintf('\n');

% ===== PODSUMOWANIE KONFIGURACJI =====
printHeader('PODSUMOWANIE KONFIGURACJI');
fprintf('Metoda preprocessing: %s\n', getPreprocessingName(config.preprocessing_method));
fprintf('Ekstraktowanie cech: %s\n', getFeatureName(config.feature_method));
fprintf('Tryb dzia≈Çania: %s\n', getModeName(config.mode));
fprintf('Wizualizacje: %s\n', getYesNo(config.show_visualizations));
fprintf('Zapis wynik√≥w: %s\n', getYesNo(config.save_results));
fprintf('\n');

% ===== URUCHOMIENIE SYSTEMU =====
fprintf('Czy uruchomiƒá system z powy≈ºszymi ustawieniami? (t/n): ');
startChoice = input('', 's');

if strcmpi(startChoice, 't') || strcmpi(startChoice, 'tak') || strcmpi(startChoice, 'y') || strcmpi(startChoice, 'yes')
    printHeader('ROZPOCZYNAM PRZETWARZANIE ODCISK√ìW PALC√ìW');
    
    % Uruchomienie g≈Ç√≥wnej funkcji
    try
        tic;
        results = fingerprintProcessing(config);
        elapsed_time = toc;
        
        % Wy≈õwietlenie podsumowania
        printHeader('WYNIKI');
        fprintf('Czas wykonania: %.2f sekund\n', elapsed_time);
        
        if isfield(results, 'preprocessing_method')
            fprintf('U≈ºyta metoda preprocessing: %s\n', results.preprocessing_method);
        end
        
        if isfield(results, 'total_minutiae')
            fprintf('≈ÅƒÖczna liczba wykrytych minucji: %d\n', results.total_minutiae);
        end
        
        if isfield(results, 'feature_count')
            fprintf('Liczba ekstraktowanych cech: %d\n', results.feature_count);
        end
        
        if isfield(results, 'processed_images')
            fprintf('Liczba przetworzonych obraz√≥w: %d\n', results.processed_images);
        end
        
        if config.save_results && isfield(results, 'output_path')
            fprintf('Wyniki zapisane w: %s\n', results.output_path);
        end
        
    catch e
        % Obs≈Çuga b≈Çƒôd√≥w
        fprintf('\n‚ùå B≈ÅƒÑD: %s\n', e.message);
        if ~isempty(e.stack)
            fprintf('≈öcie≈ºka: %s\n', e.stack(1).name);
            fprintf('Linia: %d\n', e.stack(1).line);
        end
        
        % Poka≈º sugestie rozwiƒÖzania
        fprintf('\nüí° SUGESTIE:\n');
        fprintf('- Sprawd≈∫ czy dane wej≈õciowe sƒÖ dostƒôpne\n');
        fprintf('- Upewnij siƒô ≈ºe wszystkie funkcje sƒÖ w ≈õcie≈ºce MATLAB\n');
        fprintf('- Spr√≥buj trybu "Test szybki" dla debugowania\n');
    end
else
    fprintf('Anulowano uruchomienie.\n');
end

end

% ===== FUNKCJE POMOCNICZE =====

function printHeader(text)
% Wy≈õwietla nag≈Ç√≥wek z ramkƒÖ
fprintf('\n%s\n', repmat('=', 1, 60));
fprintf('%s\n', text);
fprintf('%s\n\n', repmat('=', 1, 60));
end

function name = getPreprocessingName(method)
% Zwraca czytelnƒÖ nazwƒô metody preprocessing
switch method
    case 'basic'
        name = 'Basic (szybka, podstawowa)';
    case 'hybrid'
        name = 'Hybrid (basic + gabor)';
    case 'advanced'
        name = 'Advanced (zaawansowana)';
    case 'all'
        name = 'Por√≥wnanie wszystkich metod';
    otherwise
        name = method;
end
end

function name = getFeatureName(method)
% Zwraca czytelnƒÖ nazwƒô metody cech
switch method
    case 'simple'
        name = 'Simple (9 cech)';
    case 'normalized'
        name = 'Normalized (17 cech)';
    case 'statistical'
        name = 'Statistical (25+ cech)';
    otherwise
        name = method;
end
end

function name = getModeName(mode)
% Zwraca czytelnƒÖ nazwƒô trybu
switch mode
    case 'quick'
        name = 'Test szybki (syntetyczne dane)';
    case 'single'
        name = 'Test pojedynczego obrazu';
    case 'small'
        name = 'Ma≈Çy dataset (10 obraz√≥w)';
    case 'full'
        name = 'Pe≈Çny dataset';
    otherwise
        name = mode;
end
end

function result = getYesNo(value)
% Zwraca 'Tak' lub 'Nie'
if value
    result = 'Tak';
else
    result = 'Nie';
end
end