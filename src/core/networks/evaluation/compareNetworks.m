function [comparison_results] = compareNetworks(X, Y, labels, config)
% COMPARENETWORKS Por√≥wnuje sieci PatternNet i CNN u≈ºywajƒÖc cech odcisk√≥w palc√≥w
%
% Sk≈Çadnia:
%   [comparison_results] = compareNetworks(X, Y, labels, config)
%
% Argumenty:
%   X - macierz cech [pr√≥bki √ó 122] (wektory cech z minucji)
%   Y - macierz etykiet [pr√≥bki √ó 5] (one-hot dla 5 palc√≥w)
%   labels - nazwy kategorii ['Kciuk', 'WskazujƒÖcy', '≈örodkowy', 'Serdeczny', 'Ma≈Çy']
%   config - struktura konfiguracyjna
%
% Zwraca:
%   comparison_results - wyniki por√≥wnania PatternNet vs CNN

% Inicjalizacja rezultat√≥w
comparison_results = struct(...
    'patternnet', struct(), ...
    'cnn', struct(), ...
    'comparison', struct());

logInfo('üß† Rozpoczynam por√≥wnanie sieci PatternNet i CNN na cechach odcisk√≥w palc√≥w...');

% =========================================================================
% ETAP 1: PRZYGOTOWANIE DANYCH
% =========================================================================

% Jednokrotny podzia≈Ç danych dla wszystkich sieci
[X_train, Y_train, X_val, Y_val, X_test, Y_test] = splitFingerprintData(X, Y, 0.6, 0.2, 0.2);
logInfo('üî¢ Stratyfikowany podzia≈Ç danych 60%%/20%%/20%% dla odcisk√≥w palc√≥w');

% Po≈ÇƒÖcz dane treningowe i walidacyjne dla optymalizacji hiperparametr√≥w
X_train_opt = [X_train; X_val];
Y_train_opt = [Y_train; Y_val];

% =========================================================================
% ETAP 2: OPTYMALIZACJA PARAMETR√ìW SIECI PATTERNNET
% =========================================================================
logInfo('üîç Optymalizacja parametr√≥w dla sieci PATTERNNET (odciski palc√≥w)');

% Konfiguracja dla optymalizatora PatternNet
patternnet_config = config;
patternnet_config.network_types = {'patternnet'};
patternnet_config.X_test = X_test;
patternnet_config.Y_test = Y_test;
patternnet_config.X_val = X_val;
patternnet_config.Y_val = Y_val;
patternnet_config.scenario = 'fingerprints';

% U≈ºywamy tylko geneticOptimizer
[pattern_net, pattern_tr, pattern_results] = geneticOptimizer(X_train_opt, Y_train_opt, labels, patternnet_config);

logSuccess('‚úÖ Najlepsza dok≈Çadno≈õƒá dla PatternNet: %.2f%%', pattern_results.best_accuracy * 100);

% =========================================================================
% ETAP 3: OPTYMALIZACJA PARAMETR√ìW SIECI CNN
% =========================================================================
logInfo('üîç Optymalizacja parametr√≥w dla sieci CNN (cechy odcisk√≥w palc√≥w)');

% Konfiguracja dla optymalizatora CNN
cnn_config = config;
cnn_config.network_types = {'cnn'};
cnn_config.X_test = X_test;
cnn_config.Y_test = Y_test;
cnn_config.X_val = X_val;
cnn_config.Y_val = Y_val;
cnn_config.scenario = 'fingerprints';

% U≈ºywamy tylko geneticOptimizer
[cnn_net, cnn_tr, cnn_results] = geneticOptimizer(X_train_opt, Y_train_opt, labels, cnn_config);

logSuccess('‚úÖ Najlepsza dok≈Çadno≈õƒá dla CNN: %.2f%%', cnn_results.best_accuracy * 100);

% =========================================================================
% ETAP 4: SZCZEG√ì≈ÅOWA EWALUACJA OBU SIECI
% =========================================================================
logInfo('üìä Szczeg√≥≈Çowa ewaluacja obu sieci na danych testowych...');

% Konfiguracja ewaluacji
eval_config = struct(...
    'show_confusion_matrix', false, ...
    'show_roc_curve', false);

% Ewaluacja PatternNet na danych testowych
eval_config.figure_title = 'Ewaluacja PatternNet (Odciski Palc√≥w)';
pattern_evaluation = evaluateNetwork(pattern_net, X_test, Y_test, labels, eval_config);

% Ewaluacja CNN na danych testowych
eval_config.figure_title = 'Ewaluacja CNN (Odciski Palc√≥w)';
cnn_evaluation = evaluateNetwork(cnn_net, X_test, Y_test, labels, eval_config);

% Zapisanie wynik√≥w ewaluacji
comparison_results.patternnet.evaluation = pattern_evaluation;
comparison_results.cnn.evaluation = cnn_evaluation;

% =========================================================================
% ETAP 5: ANALIZA POR√ìWNAWCZA
% =========================================================================
logInfo('üìä Analiza por√≥wnawcza wynik√≥w...');

% Zapisanie szczeg√≥≈Çowych wynik√≥w dla obu sieci
comparison_results.patternnet.net = pattern_net;
comparison_results.patternnet.tr = pattern_tr;
comparison_results.patternnet.results = pattern_results;

comparison_results.cnn.net = cnn_net;
comparison_results.cnn.tr = cnn_tr;
comparison_results.cnn.results = cnn_results;

% Okre≈õlenie zwyciƒôzcy na podstawie dok≈Çadno≈õci
if pattern_evaluation.accuracy > cnn_evaluation.accuracy
    comparison_results.comparison.winner = 'patternnet';
    comparison_results.comparison.accuracy_gain = pattern_evaluation.accuracy - cnn_evaluation.accuracy;
elseif cnn_evaluation.accuracy > pattern_evaluation.accuracy
    comparison_results.comparison.winner = 'cnn';
    comparison_results.comparison.accuracy_gain = cnn_evaluation.accuracy - pattern_evaluation.accuracy;
else
    comparison_results.comparison.winner = 'tie';
    comparison_results.comparison.accuracy_gain = 0;
end

% Procentowy wzrost dok≈Çadno≈õci zwyciƒôzcy
if ~strcmp(comparison_results.comparison.winner, 'tie')
    if strcmp(comparison_results.comparison.winner, 'patternnet')
        baseline = cnn_evaluation.accuracy;
    else
        baseline = pattern_evaluation.accuracy;
    end
    
    if baseline > 0
        comparison_results.comparison.accuracy_gain_percent = (comparison_results.comparison.accuracy_gain / baseline) * 100;
    else
        comparison_results.comparison.accuracy_gain_percent = 0;
    end
else
    comparison_results.comparison.accuracy_gain_percent = 0;
end

% Por√≥wnanie innych metryk
comparison_results.comparison.precision_diff = pattern_evaluation.macro_precision - cnn_evaluation.macro_precision;
comparison_results.comparison.recall_diff = pattern_evaluation.macro_recall - cnn_evaluation.macro_recall;
comparison_results.comparison.f1_diff = pattern_evaluation.macro_f1 - cnn_evaluation.macro_f1;
comparison_results.comparison.prediction_time_diff = pattern_evaluation.prediction_time - cnn_evaluation.prediction_time;

% Informacja o metodzie optymalizacji
comparison_results.comparison.optimization_method = config.optimization_method;
comparison_results.comparison.problem_domain = 'fingerprint_identification';

logSuccess('‚úÖ Analiza zako≈Ñczona. Zwyciƒôzca: %s (przewaga: %.2f%%)', ...
    comparison_results.comparison.winner, ...
    comparison_results.comparison.accuracy_gain * 100);

% =========================================================================
% ETAP 6: WIZUALIZACJA WYNIK√ìW (OPCJONALNIE)
% =========================================================================
if isfield(config, 'show_visualizations') && config.show_visualizations
    logInfo('üìà Generowanie wizualizacji por√≥wnawczych...');
    
    try
        % Utworzenie folderu wizualizacji
        timestamp = datestr(now, 'yyyymmdd_HHMMSS');
        viz_dir = fullfile('output', 'visualizations', ...
            sprintf('fingerprint_patternnet_vs_cnn_%s', timestamp));
        
        if ~exist(viz_dir, 'dir')
            mkdir(viz_dir);
            logInfo('üìÅ Utworzono katalog wizualizacji: %s', viz_dir);
        end
        
        % Generowanie wizualizacji por√≥wnawczych
        generateFingerprintComparisonVisualizations(comparison_results, viz_dir, labels);
        
        logSuccess('‚úÖ Wizualizacje wygenerowane i zapisane do: %s', viz_dir);
    catch e
        logWarning('‚ö†Ô∏è Problem z generowaniem wizualizacji: %s', e.message);
    end
end

logSuccess('‚úÖ Por√≥wnanie sieci PatternNet vs CNN zako≈Ñczone.');

end

function [X_train, Y_train, X_val, Y_val, X_test, Y_test] = splitFingerprintData(X, Y, train_ratio, val_ratio, test_ratio)
% Podzia≈Ç danych z zachowaniem proporcji klas (stratified split)

n_samples = size(X, 1);
n_classes = size(Y, 2);

X_train = []; Y_train = [];
X_val = []; Y_val = [];
X_test = []; Y_test = [];

% Stratified split dla ka≈ºdej klasy
for class = 1:n_classes
    % Znajd≈∫ pr√≥bki tej klasy
    class_indices = find(Y(:, class) == 1);
    n_class_samples = length(class_indices);
    
    % Oblicz liczby pr√≥bek dla ka≈ºdego zbioru
    n_train = round(n_class_samples * train_ratio);
    n_val = round(n_class_samples * val_ratio);
    n_test = n_class_samples - n_train - n_val;
    
    % Losowe pomieszanie pr√≥bek klasy
    shuffled_indices = class_indices(randperm(n_class_samples));
    
    % Podzia≈Ç na zbiory
    train_indices = shuffled_indices(1:n_train);
    val_indices = shuffled_indices(n_train+1:n_train+n_val);
    test_indices = shuffled_indices(n_train+n_val+1:end);
    
    % Dodanie do zbior√≥w
    X_train = [X_train; X(train_indices, :)];
    Y_train = [Y_train; Y(train_indices, :)];
    
    X_val = [X_val; X(val_indices, :)];
    Y_val = [Y_val; Y(val_indices, :)];
    
    X_test = [X_test; X(test_indices, :)];
    Y_test = [Y_test; Y(test_indices, :)];
end

logInfo('Podzia≈Ç danych: Train=%d, Val=%d, Test=%d', size(X_train,1), size(X_val,1), size(X_test,1));
end

function generateFingerprintComparisonVisualizations(results, output_dir, labels)
% Generuje specjalistyczne wizualizacje dla por√≥wnania sieci w kontek≈õcie odcisk√≥w palc√≥w

% Placeholder - funkcja do rozwiniƒôcia
logInfo('Generowanie wizualizacji por√≥wnawczych dla odcisk√≥w palc√≥w...');
% Tu mo≈ºna dodaƒá specjalistyczne wizualizacje
end