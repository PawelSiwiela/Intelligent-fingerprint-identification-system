function [trainData, valData, testData] = splitDataset(features, labels, metadata, splitRatio)
% SPLITDATASET Stratyfikowany podzia≈Ç zbioru cech na train/val/test z sta≈ÇƒÖ liczbƒÖ pr√≥bek
%
% Funkcja wykonuje stratyfikowany podzia≈Ç macierzy cech na zbiory treningowy,
% walidacyjny i testowy, zapewniajƒÖc r√≥wnomiernƒÖ reprezentacjƒô ka≈ºdej klasy.
% U≈ºywa sta≈Çej liczby pr√≥bek per klasa zamiast proporcji procentowych dla
% lepszej kontroli nad balansowaniem ma≈Çych zbior√≥w danych.
%
% Parametry wej≈õciowe:
%   features - macierz cech [samples √ó features] (output feature extraction)
%   labels - wektor etykiet klas [samples √ó 1] (ID palc√≥w)
%   metadata - struktura metadanych z nazwami palc√≥w (metadata.fingerNames)
%   splitRatio - [train_count, val_count, test_count] liczba pr√≥bek per klasa
%                domy≈õlnie: [7, 3, 4] = 7 train + 3 val + 4 test per klasa
%
% Parametry wyj≈õciowe:
%   trainData - struktura: {features, labels, indices}
%   valData - struktura: {features, labels, indices}
%   testData - struktura: {features, labels, indices}
%
% Algorytm:
%   1. Wykrywanie i konwersja proporcji na sta≈Çe liczby je≈õli potrzeba
%   2. Analiza dostƒôpno≈õci pr√≥bek per klasa
%   3. Stratyfikowany podzia≈Ç z adaptacyjnym dostosowaniem dla ma≈Çych klas
%   4. Randomizacja kolejno≈õci w ka≈ºdym zbiorze
%   5. Weryfikacja balansu klas i raportowanie statystyk
%
% Przyk≈Çad u≈ºycia:
%   [train, val, test] = splitDataset(featureMatrix, labels, metadata, [9,2,3]);

if nargin < 4
    % Domy≈õlne sta≈Çe liczby pr√≥bek per klasa - sprawdzone empirycznie
    splitRatio = [7, 3, 4]; % Train: 7, Val: 3, Test: 4 pr√≥bek per klasa
end

fprintf('\nüîÑ Creating stratified dataset split...\n');

% Wykrywanie formatu splitRatio i konwersja je≈õli to proporcje
if all(splitRatio <= 1) && abs(sum(splitRatio) - 1) < 0.1
    % Wykryto format proporcjonalny - konwertuj na sta≈Çe liczby
    fprintf('‚ö†Ô∏è  Converting proportions to fixed counts...\n');
    
    % Znajd≈∫ minimalnƒÖ liczbƒô pr√≥bek per klasa jako ograniczenie g√≥rne
    uniqueLabels = unique(labels);
    minSamplesPerClass = inf;
    for i = 1:length(uniqueLabels)
        classCount = sum(labels == uniqueLabels(i));
        minSamplesPerClass = min(minSamplesPerClass, classCount);
    end
    
    % Konwertuj proporcje na liczby z buforem bezpiecze≈Ñstwa
    totalSamples = round(minSamplesPerClass * 0.9); % 90% dostƒôpnych pr√≥bek
    splitCounts = round(splitRatio * totalSamples);
    
    % Walidacja - upewnij siƒô ≈ºe suma nie przekracza dostƒôpnych pr√≥bek
    if sum(splitCounts) > minSamplesPerClass
        fprintf('‚ö†Ô∏è  Adjusting counts to fit available samples...\n');
        splitCounts = [4, 2, 2]; % Konserwatywny fallback
    end
    
    splitRatio = splitCounts;
    fprintf('üîß Using fixed counts: Train=%d, Val=%d, Test=%d per class\n', ...
        splitRatio(1), splitRatio(2), splitRatio(3));
else
    % Format ju≈º zawiera sta≈Çe liczby pr√≥bek
    fprintf('üìä Using fixed counts: Train=%d, Val=%d, Test=%d per class\n', ...
        splitRatio(1), splitRatio(2), splitRatio(3));
end

trainCount = splitRatio(1);
valCount = splitRatio(2);
testCount = splitRatio(3);
totalNeededPerClass = trainCount + valCount + testCount;

uniqueLabels = unique(labels);
numClasses = length(uniqueLabels);

trainIndices = [];
valIndices = [];
testIndices = [];

% Analiza dostƒôpno≈õci pr√≥bek - sprawd≈∫ czy ka≈ºda klasa ma wystarczajƒÖco danych
fprintf('\nüîç Checking class sample availability:\n');
for i = 1:numClasses
    classLabel = uniqueLabels(i);
    classCount = sum(labels == classLabel);
    fingerName = metadata.fingerNames{classLabel};
    
    fprintf('  %s: %d samples available, %d needed\n', ...
        fingerName, classCount, totalNeededPerClass);
    
    if classCount < totalNeededPerClass
        fprintf('  ‚ö†Ô∏è  WARNING: Not enough samples for %s!\n', fingerName);
    end
end

% Stratyfikowany podzia≈Ç z sta≈ÇƒÖ liczbƒÖ pr√≥bek per klasa
fprintf('\nüì¶ Splitting with fixed counts per class:\n');
for i = 1:numClasses
    classLabel = uniqueLabels(i);
    classIndices = find(labels == classLabel);
    numSamples = length(classIndices);
    
    % Randomizacja kolejno≈õci indeks√≥w klasy
    classIndices = classIndices(randperm(numSamples));
    
    % Okre≈õl liczbƒô pr√≥bek dla ka≈ºdego zbioru z ograniczeniem dostƒôpno≈õci
    currentTrainCount = min(trainCount, numSamples);
    currentValCount = min(valCount, max(0, numSamples - currentTrainCount));
    currentTestCount = min(testCount, max(0, numSamples - currentTrainCount - currentValCount));
    
    % Adaptacyjne dostosowanie dla bardzo ma≈Çych klas
    if numSamples < totalNeededPerClass
        totalAvailable = numSamples;
        ratio = [trainCount, valCount, testCount] / totalNeededPerClass;
        
        % Proporcjonalne skalowanie z minimum 1 pr√≥bka gdzie mo≈ºliwe
        currentTrainCount = max(1, round(totalAvailable * ratio(1)));
        currentValCount = max(1, round(totalAvailable * ratio(2)));
        currentTestCount = max(0, totalAvailable - currentTrainCount - currentValCount);
        
        % Kontrola sp√≥jno≈õci - nie przekraczaj dostƒôpnych pr√≥bek
        if currentTrainCount + currentValCount + currentTestCount > totalAvailable
            currentTestCount = totalAvailable - currentTrainCount - currentValCount;
        end
    end
    
    % Przypisanie indeks√≥w do odpowiednich zbior√≥w
    if currentTrainCount > 0
        trainIndices = [trainIndices; classIndices(1:currentTrainCount)];
    end
    
    if currentValCount > 0
        valStart = currentTrainCount + 1;
        valEnd = currentTrainCount + currentValCount;
        valIndices = [valIndices; classIndices(valStart:valEnd)];
    end
    
    if currentTestCount > 0
        testStart = currentTrainCount + currentValCount + 1;
        testEnd = currentTrainCount + currentValCount + currentTestCount;
        testIndices = [testIndices; classIndices(testStart:testEnd)];
    end
    
    fingerName = metadata.fingerNames{classLabel};
    fprintf('  %s: %d samples -> Train:%d, Val:%d, Test:%d\n', ...
        fingerName, numSamples, currentTrainCount, currentValCount, currentTestCount);
end

% Finalna randomizacja kolejno≈õci w ka≈ºdym zbiorze
trainIndices = trainIndices(randperm(length(trainIndices)));
valIndices = valIndices(randperm(length(valIndices)));
testIndices = testIndices(randperm(length(testIndices)));

% Tworzenie struktur danych wyj≈õciowych
trainData = struct();
trainData.features = features(trainIndices, :);
trainData.labels = labels(trainIndices);
trainData.indices = trainIndices;

valData = struct();
valData.features = features(valIndices, :);
valData.labels = labels(valIndices);
valData.indices = valIndices;

testData = struct();
testData.features = features(testIndices, :);
testData.labels = labels(testIndices);
testData.indices = testIndices;

% Raportowanie statystyk ko≈Ñcowych
fprintf('\nüìä Final dataset sizes:\n');
fprintf('  Training:   %d samples\n', length(trainIndices));
fprintf('  Validation: %d samples\n', length(valIndices));
fprintf('  Testing:    %d samples\n', length(testIndices));
fprintf('  Total:      %d samples\n', length(labels));

% Weryfikacja balansu klas w ko≈Ñcowych zbiorach
fprintf('\nüéØ Final class distribution:\n');
for i = 1:numClasses
    fingerName = metadata.fingerNames{uniqueLabels(i)};
    trainClassCount = sum(trainData.labels == uniqueLabels(i));
    valClassCount = sum(valData.labels == uniqueLabels(i));
    testClassCount = sum(testData.labels == uniqueLabels(i));
    
    fprintf('  %s: Train=%d, Val=%d, Test=%d\n', ...
        fingerName, trainClassCount, valClassCount, testClassCount);
end

fprintf('‚úÖ Stratified dataset split completed!\n');
end