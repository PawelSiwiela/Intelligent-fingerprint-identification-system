function debugPreprocessing()
% DEBUGPREPROCESSING Test preprocessing pipeline na wszystkich obrazach

close all;
clear all;
clc;

fprintf('üîç TEST PREPROCESSING - WSZYSTKIE OBRAZY\n');
fprintf('%s\n', repmat('=', 1, 50));

% Setup ≈õcie≈ºek
currentDir = fileparts(mfilename('fullpath'));
projectRoot = fileparts(fileparts(currentDir));
addpath(genpath(fullfile(projectRoot, 'src')));

% Setup logFile
systemConfig = loadConfig();
timestamp = datestr(now, 'yyyymmdd_HHMMSS');
logFile = fullfile(systemConfig.logsPath, sprintf('debug_preprocessing_all_%s.log', timestamp));

% Utw√≥rz dedykowany folder na wyniki
outputDir = fullfile(systemConfig.figuresPath, sprintf('preprocessing_data_%s', timestamp));
if ~exist(outputDir, 'dir')
    mkdir(outputDir);
    fprintf('üìÅ Utworzono folder: %s\n', outputDir);
end

% Wczytaj wszystkie obrazy
fprintf('üìÇ Wczytywanie obraz√≥w...\n');
[images, labels] = loadImages(systemConfig, logFile);
numImages = length(images);
fprintf('‚úÖ Wczytano %d obraz√≥w\n\n', numImages);

% Przygotuj kontener na wyniki
results = struct();
results.times = zeros(1, numImages);
results.coverages = zeros(1, numImages);
results.errors = {};
results.success = true(1, numImages);

% PRZETW√ìRZ WSZYSTKIE OBRAZY
fprintf('üîß Preprocessing wszystkich obraz√≥w...\n');
totalStart = tic;

fingerNames = {'Kciuk', 'WskazujƒÖcy', '≈örodkowy', 'Serdeczny', 'Ma≈Çy'};

for i = 1:numImages
    fprintf('  [%d/%d] %s... ', i, numImages, fingerNames{labels(i)});
    
    try
        % Preprocessing pojedynczego obrazu
        tic;
        processedImage = preprocessing(images{i}, logFile, false);
        elapsed = toc;
        
        % Oblicz metryki
        coverage = sum(processedImage(:)) / numel(processedImage) * 100;
        
        % Zapisz wyniki
        results.times(i) = elapsed;
        results.coverages(i) = coverage;
        
        fprintf('‚úÖ %.3fs, %.2f%% ', elapsed, coverage);
        
        % ZAPISZ POR√ìWNANIE (BEZ WY≈öWIETLANIA)
        saveSingleComparison(images{i}, processedImage, i, labels(i), ...
            fingerNames{labels(i)}, elapsed, coverage, outputDir);
        
        fprintf('üíæ\n');
        
    catch ME
        % Zapisz b≈ÇƒÖd
        results.success(i) = false;
        results.errors{end+1} = sprintf('Obraz %d: %s', i, ME.message);
        fprintf('‚ùå B≈ÅƒÑD: %s\n', ME.message);
    end
end

totalTime = toc(totalStart);

% ZAPISZ PODSUMOWANIE
saveSummaryReport(results, fingerNames, labels, totalTime, numImages, outputDir);

% PODSUMOWANIE W KONSOLI
fprintf('\n%s\n', repmat('=', 1, 50));
fprintf('üìä PODSUMOWANIE KO≈ÉCOWE\n');
fprintf('%s\n', repmat('=', 1, 50));

successCount = sum(results.success);
failureCount = numImages - successCount;

fprintf('‚úÖ Sukces: %d/%d obraz√≥w (%.1f%%)\n', successCount, numImages, (successCount/numImages)*100);
fprintf('‚ùå B≈Çƒôdy: %d/%d obraz√≥w (%.1f%%)\n', failureCount, numImages, (failureCount/numImages)*100);
fprintf('‚è±Ô∏è  Ca≈Çkowity czas: %.2f sekund\n', totalTime);

if successCount > 0
    fprintf('‚è±Ô∏è  ≈öredni czas na obraz: %.3f sekund\n', mean(results.times(results.success)));
    fprintf('üìà ≈örednie pokrycie: %.2f%%\n', mean(results.coverages(results.success)));
end

% ANALIZA WED≈ÅUG PALC√ìW
fprintf('\nüëÜ ANALIZA WED≈ÅUG PALC√ìW:\n');
for finger = 1:5
    fingerMask = labels == finger & results.success;
    if sum(fingerMask) > 0
        fingerCoverages = results.coverages(fingerMask);
        fingerTimes = results.times(fingerMask);
        fprintf('  %s: %d obraz√≥w, ≈õr.pokrycie=%.2f%%, ≈õr.czas=%.3fs\n', ...
            fingerNames{finger}, sum(fingerMask), mean(fingerCoverages), mean(fingerTimes));
    else
        fprintf('  %s: brak udanych procesowa≈Ñ\n', fingerNames{finger});
    end
end

% WYPISZ B≈ÅƒòDY
if ~isempty(results.errors)
    fprintf('\n‚ùå SZCZEG√ì≈ÅY B≈ÅƒòD√ìW:\n');
    for i = 1:length(results.errors)
        fprintf('   %s\n', results.errors{i});
    end
end

fprintf('\n‚úÖ Test zako≈Ñczony!\n');
fprintf('üìÅ Wszystkie wyniki zapisane w: %s\n', outputDir);
end

function saveSingleComparison(originalImage, processedImage, imageIndex, fingerLabel, fingerName, processingTime, coverage, outputDir)
% Zapisuje por√≥wnanie przed/po bez wy≈õwietlania

% Utw√≥rz niewidocznƒÖ figurƒô
fig = figure('Visible', 'off', 'Position', [0, 0, 800, 400]);

try
    % Oryginalny obraz
    subplot(1, 2, 1);
    imshow(originalImage);
    title(sprintf('ORYGINALNY\n%s (Palec %d)', fingerName, fingerLabel), ...
        'FontSize', 14, 'FontWeight', 'bold');
    
    % Dodaj informacje o rozmiarze
    [h, w] = size(originalImage);
    xlabel(sprintf('Rozmiar: %dx%d pikseli', h, w), 'FontSize', 10);
    
    % Przetworzony obraz
    subplot(1, 2, 2);
    imshow(processedImage);
    title(sprintf('PO PREPROCESSING\nPokrycie: %.2f%%', coverage), ...
        'FontSize', 14, 'FontWeight', 'bold', 'Color', getColorForCoverage(coverage));
    
    % Dodaj informacje o czasie
    xlabel(sprintf('Czas: %.3f s', processingTime), 'FontSize', 10);
    
    % G≈Ç√≥wny tytu≈Ç
    sgtitle(sprintf('OBRAZ #%d - %s', imageIndex, fingerName), ...
        'FontSize', 16, 'FontWeight', 'bold');
    
    % Zapisz figurƒô
    filename = sprintf('img_%03d_%s_palec%d.png', imageIndex, ...
        lower(strrep(strrep(fingerName, 'ƒÖ', 'a'), '≈õ', 's')), fingerLabel);
    savePath = fullfile(outputDir, filename);
    
    % Zapisz w dobrej jako≈õci
    print(fig, savePath, '-dpng', '-r200');
    
catch ME
    warning('Nie uda≈Ço siƒô zapisaƒá por√≥wnania dla obrazu %d: %s', imageIndex, ME.message);
end

% Zamknij figurƒô
close(fig);
end

function saveSummaryReport(results, fingerNames, labels, totalTime, numImages, outputDir)
% Zapisuje raport podsumowujƒÖcy w pliku tekstowym i jako wykres

successCount = sum(results.success);

% === RAPORT TEKSTOWY ===
reportFile = fullfile(outputDir, 'preprocessing_report.txt');
fid = fopen(reportFile, 'w');

if fid ~= -1
    fprintf(fid, '=== RAPORT PREPROCESSING ===\n');
    fprintf(fid, 'Data: %s\n', datestr(now));
    fprintf(fid, 'Obraz√≥w przetworzonych: %d/%d (%.1f%%)\n', successCount, numImages, (successCount/numImages)*100);
    fprintf(fid, 'Ca≈Çkowity czas: %.2f sekund\n', totalTime);
    
    if successCount > 0
        fprintf(fid, '≈öredni czas na obraz: %.3f sekund\n', mean(results.times(results.success)));
        fprintf(fid, '≈örednie pokrycie: %.2f%%\n', mean(results.coverages(results.success)));
        
        fprintf(fid, '\n=== STATYSTYKI WED≈ÅUG PALC√ìW ===\n');
        for finger = 1:5
            fingerMask = labels == finger & results.success;
            if sum(fingerMask) > 0
                fingerCoverages = results.coverages(fingerMask);
                fingerTimes = results.times(fingerMask);
                fprintf(fid, '%s: %d obraz√≥w, ≈õr.pokrycie=%.2f%%, ≈õr.czas=%.3fs\n', ...
                    fingerNames{finger}, sum(fingerMask), mean(fingerCoverages), mean(fingerTimes));
            end
        end
    end
    
    if ~isempty(results.errors)
        fprintf(fid, '\n=== B≈ÅƒòDY ===\n');
        for i = 1:length(results.errors)
            fprintf(fid, '%s\n', results.errors{i});
        end
    end
    
    fclose(fid);
end

% === WYKRES PODSUMOWUJƒÑCY ===
if successCount > 0
    fig = figure('Visible', 'off', 'Position', [0, 0, 1200, 800]);
    
    try
        % 1. Histogram czas√≥w
        subplot(2, 3, 1);
        validTimes = results.times(results.success);
        histogram(validTimes, min(20, length(validTimes)));
        xlabel('Czas [s]');
        ylabel('Liczba obraz√≥w');
        title('Rozk≈Çad czas√≥w przetwarzania');
        grid on;
        
        % 2. Histogram pokryƒá
        subplot(2, 3, 2);
        validCoverages = results.coverages(results.success);
        histogram(validCoverages, min(20, length(validCoverages)));
        xlabel('Pokrycie [%]');
        ylabel('Liczba obraz√≥w');
        title('Rozk≈Çad pokrycia');
        grid on;
        
        % 3. Czas vs pokrycie
        subplot(2, 3, 3);
        scatter(validTimes, validCoverages, 30, 'filled');
        xlabel('Czas [s]');
        ylabel('Pokrycie [%]');
        title('Czas vs Pokrycie');
        grid on;
        
        % 4. Pokrycie wed≈Çug palc√≥w
        subplot(2, 3, 4);
        fingerCoverages = zeros(1, 5);
        fingerCounts = zeros(1, 5);
        for finger = 1:5
            fingerMask = labels == finger & results.success;
            if sum(fingerMask) > 0
                fingerCoverages(finger) = mean(results.coverages(fingerMask));
                fingerCounts(finger) = sum(fingerMask);
            end
        end
        bar(fingerCoverages);
        set(gca, 'XTickLabel', fingerNames);
        xtickangle(45);
        ylabel('≈örednie pokrycie [%]');
        title('Pokrycie wed≈Çug palc√≥w');
        grid on;
        
        % 5. Czas wed≈Çug palc√≥w
        subplot(2, 3, 5);
        fingerTimes = zeros(1, 5);
        for finger = 1:5
            fingerMask = labels == finger & results.success;
            if sum(fingerMask) > 0
                fingerTimes(finger) = mean(results.times(fingerMask));
            end
        end
        bar(fingerTimes);
        set(gca, 'XTickLabel', fingerNames);
        xtickangle(45);
        ylabel('≈öredni czas [s]');
        title('Czas wed≈Çug palc√≥w');
        grid on;
        
        % 6. Statystyki tekstowe
        subplot(2, 3, 6);
        axis off;
        statsText = sprintf('PODSUMOWANIE\n\n');
        statsText = [statsText sprintf('Sukces: %d/%d (%.1f%%)\n', successCount, numImages, (successCount/numImages)*100)];
        statsText = [statsText sprintf('Ca≈Çkowity czas: %.1fs\n', totalTime)];
        statsText = [statsText sprintf('≈öredni czas: %.3fs\n', mean(validTimes))];
        statsText = [statsText sprintf('≈örednie pokrycie: %.2f%%\n', mean(validCoverages))];
        statsText = [statsText sprintf('\nMin pokrycie: %.2f%%\n', min(validCoverages))];
        statsText = [statsText sprintf('Max pokrycie: %.2f%%\n', max(validCoverages))];
        
        text(0.1, 0.9, statsText, 'FontSize', 12, 'VerticalAlignment', 'top', ...
            'HorizontalAlignment', 'left', 'FontName', 'Courier');
        
        sgtitle(sprintf('Analiza preprocessing - %s', datestr(now)), ...
            'FontSize', 16, 'FontWeight', 'bold');
        
        % Zapisz wykres
        summaryPath = fullfile(outputDir, 'preprocessing_summary.png');
        print(fig, summaryPath, '-dpng', '-r200');
        
        close(fig);
        
    catch ME
        close(fig);
    end
end
end

function color = getColorForCoverage(coverage)
% Zwraca kolor tekstu w zale≈ºno≈õci od pokrycia

if coverage < 1
    color = [0.8, 0, 0];      % Czerwony - bardzo s≈Çabe
elseif coverage < 3
    color = [0.8, 0.4, 0];    % Pomara≈Ñczowy - s≈Çabe
elseif coverage < 10
    color = [0, 0.6, 0];      % Zielony - dobre
else
    color = [0, 0, 0.8];      % Niebieski - bardzo dobre
end
end